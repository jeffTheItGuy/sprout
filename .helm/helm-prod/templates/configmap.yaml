# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        # Add detailed logging for debugging
        error_log /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log;
        
        # Serve static files
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        # Proxy API requests to backend service - FIXED
        location /api/ {
            # Remove /api prefix and forward to backend
            rewrite ^/api/(.*)$ /$1 break;
            
            # Updated proxy configuration with proper error handling
            proxy_pass http://backend-service:{{ .Values.backend.service.port }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Handle connection errors gracefully
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            
            # Ensure no buffering for real-time responses
            proxy_buffering off;
            
            # CORS headers for all responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }
        
        # Handle preflight requests
        location ~ ^/api/.*$ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Debug endpoint to test backend connectivity
        location /debug/backend {
            proxy_pass http://backend-service:{{ .Values.backend.service.port }}/health;
            add_header 'Access-Control-Allow-Origin' '*' always;
        }
    }

