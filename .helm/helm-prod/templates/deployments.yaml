apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: {{ .Values.frontend.replicaCount }}
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      {{- if .Values.frontend.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.frontend.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: frontend
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.frontend.service.port }}
          env:
            - name: VITE_BACKEND_URL
              value: "/api"
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.frontend.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.frontend.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      {{- if .Values.backend.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.backend.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: backend
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.backend.service.port }}
          env:
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: "{{ .Values.redis.service.port }}"
            - name: ALLOWED_ORIGINS
              value: {{ .Values.backend.env.ALLOWED_ORIGINS | quote }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.auth.passwordSecretName }}
                  key: {{ .Values.redis.auth.passwordKey }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}

---

# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-worker
  labels:
    app: container-worker
spec:
  replicas: {{ .Values.worker.replicaCount }}
  selector:
    matchLabels:
      app: container-worker
  template:
    metadata:
      labels:
        app: container-worker
    spec:
      {{- if .Values.worker.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.worker.imagePullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.rbac.serviceAccount.name }}
      containers:
        - name: worker
          image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          env:
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: "{{ .Values.redis.service.port }}"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.auth.passwordSecretName }}
                  key: {{ .Values.redis.auth.passwordKey }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
