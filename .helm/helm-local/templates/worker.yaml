---
# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-worker
  labels:
    app: container-worker
spec:
  replicas: {{ .Values.worker.replicaCount }}
  selector:
    matchLabels:
      app: container-worker
  template:
    metadata:
      labels:
        app: container-worker
    spec:
      serviceAccountName: {{ .Values.rbac.serviceAccount.name }}
      containers:
        - name: worker
          image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          env:
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: "{{ .Values.redis.service.port }}"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.auth.passwordSecretName }}
                  key: {{ .Values.redis.auth.passwordKey }}
          resources:
{{ toYaml .Values.worker.resources | indent 12 }}

{{- if .Values.keda.enabled }}
---
# KEDA ScaledObject
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: container-worker-scaledobject
spec:
  scaleTargetRef:
    name: container-worker 
  minReplicaCount: 0        
  maxReplicaCount: 10       
  pollingInterval: 10       
  cooldownPeriod: 60       
  triggers:
  - type: redis-streams
    metadata:
      address: "redis-service:{{ .Values.redis.service.port }}"
      stream: {{ .Values.keda.streamName }}
      consumerGroup: {{ .Values.keda.consumerGroup }}
      pendingEntriesCount: {{ .Values.keda.pendingEntriesCount | quote }}
      lagThreshold: {{ .Values.keda.lagThreshold | quote }}
    authenticationRef:
      name: redis-trigger-auth
---
# KEDA TriggerAuthentication
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: redis-trigger-auth
spec:
  secretTargetRef:
  - parameter: password
    name: {{ .Values.redis.auth.passwordSecretName }}
    key: {{ .Values.redis.auth.passwordKey }}
{{- end }}

{{- if .Values.rbac.enabled }}
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.rbac.serviceAccount.name }}

---
# ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: container-worker-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "create", "delete", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: container-worker-binding
subjects:
  - kind: ServiceAccount
    name: {{ .Values.rbac.serviceAccount.name }}
    namespace: sprout
roleRef:
  kind: ClusterRole
  name: container-worker-role
  apiGroup: rbac.authorization.k8s.io
{{- end }}